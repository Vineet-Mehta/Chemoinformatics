import math
import numpy as np

def bachelier_impvol(price, strike, spot, texp=1, intr=0, divr=0, cp=1,
                     forward=None, df=None):

    if forward is None:
        forward = spot * math.exp(-divr * texp) / df

    if df is None:
        df = math.exp(-intr * texp)

    price_straddle = 2 * price / df - cp * (forward - strike)

    # vectors a and b used for rational Chebyshev approximation
    a = np.array([1.266458051348246e4,
                  2.493415285349361e4,
                  6.106322407867059e3,
                  1.848489695437094e3,
                  5.988761102690991e2,
                  4.980340217855084e1,
                  2.100960795068497e1,
                  3.994961687345134e-1])

    b = np.array([1.174240599306013e1,
                  -2.067719486400926e2,
                  3.608817108375034e3,
                  2.392008891720782e4,
                  1.598919697679745e4,
                  1.323614537899738e3,
                  1.495105008310999e3,
                  3.093573936743112e1,
                  4.990534153589422e1])

    v = abs(forward - strike) / price_straddle

    # when the time value is very slightly negative, we correct to give zero vol.
    mask = (price > 0) & (1 < v) & (v < 1 + 8 * np.finfo(float).eps)
    v[mask] = 1

    nu = np.where(v < 1e-8, 1 / (1 + v * v * (1 / 3 + v * v / 5)), v / np.arctanh(v))

    poly_nu = np.polyval(a[::-1], nu)
    poly_de = np.polyval(b[::-1], nu) + 1

    vol_norm = math.sqrt(math.pi * nu / (2 * texp)) * price_straddle * (poly_nu / poly_de)

    return vol_norm
