import numpy as np
from scipy.linalg import solve_banded

def solveStep(ϑ, PL, PR, h, Fm, Cm, Em, dt):
    frac = dt / (2 * h)
    M = len(ϑ)
    B = np.zeros(M)
    A = np.zeros(M - 1)
    C = np.zeros(M - 1)
    
    B[1:M-2] = 1.0 + frac * (Cm[1:M-2] * Em[1:M-2] * (1.0 / (Fm[2:M-1] - Fm[1:M-2]) + 1.0 / (Fm[1:M-2] - Fm[:M-3])))
    C[1:M-2] = -frac * Cm[2:M-1] * Em[2:M-1] / (Fm[2:M-1] - Fm[1:M-2])
    A[:M-3] = -frac * Cm[:M-3] * Em[:M-3] / (Fm[1:M-2] - Fm[:M-3])
    
    B[0] = Cm[0] / (Fm[1] - Fm[0]) * Em[0]
    C[0] = Cm[1] / (Fm[1] - Fm[0]) * Em[1]
    B[M-1] = Cm[M-1] / (Fm[M-1] - Fm[M-2]) * Em[M-1]
    A[M-2] = Cm[M-2] / (Fm[M-1] - Fm[M-2]) * Em[M-2]
    
    tri = np.zeros((3, M))
    tri[0, 1:M-1] = A
    tri[1, :] = B
    tri[2, :M-2] = C
    
    p1 = ϑ[0]
    pm = ϑ[M-1]
    ϑ[0] = 0
    ϑ[M-1] = 0
    ϑ0 = solve_banded((1, 1), tri, ϑ)
    PL0 = PL + dt * Cm[1] / (Fm[1] - Fm[0]) * Em[1] * ϑ0[1]
    PR0 = PR + dt * Cm[M-2] / (Fm[M-1] - Fm[M-2]) * Em[M-2] * ϑ0[M-2]
    ϑ[0] = p1
    ϑ[M-1] = pm
    
    return ϑ0, PL0, PR0
